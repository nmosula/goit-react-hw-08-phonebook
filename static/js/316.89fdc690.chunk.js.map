{"version":3,"file":"static/js/316.89fdc690.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledLoader = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 99;\n`;","import { RotatingLines } from 'react-loader-spinner';\n\nimport { StyledLoader } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <StyledLoader>\n      <RotatingLines strokeColor=\"#ebebeb\" />\n    </StyledLoader>\n  );\n};\n\nexport default Loader;","import styled from 'styled-components';\n\nexport const FrmLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 18px;\n`;\n\nexport const FrmInput = styled.input`\n  width: 300px;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter, selectFilterValue } from 'redux/filterSlice';\nimport { FrmLabel, FrmInput } from './Filter.styled';\n\nfunction Filter() {\n\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilterValue);\n\n  return (\n    <FrmLabel>\n      Find contacts by name\n      <FrmInput\n        name=\"filter\"\n        type=\"text\"\n        value={filterValue}\n        onChange={e => dispatch(setFilter(e.currentTarget.value))}\n      />\n    </FrmLabel>\n  );\n}\n\nexport default Filter;","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 300px;\n  height: 30px;\n  padding: 5px;\n  font-size: 16px;\n`;\n\nexport const FrmButton = styled.button`\n  width: 70px;\n  cursor: pointer;\n`;","import { useDispatch } from 'react-redux';\nimport { Item, FrmButton } from './ContactItem.styled';\nimport { deleteContact } from 'redux/operations';\nimport Notiflix from 'notiflix';\n\nfunction ContactItem({ item }) {\n\n    const dispatch = useDispatch();\n\n    return (\n        <Item key={item.id}>\n            {item.name}: {item.number}\n            <FrmButton onClick={() => {\n                    dispatch(deleteContact(item.id));\n                    Notiflix.Notify.info(`Контакт ${item.name} видалений з контактів`);\n                }\n            }\n                aria-label=\"Delete\">\n                Delete\n            </FrmButton>\n        </Item>\n    );\n};\n\nexport default ContactItem;","import ContactItem from 'components/ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { selectContactsItems } from 'redux/contactsSlice';\nimport { selectFilterValue } from 'redux/filterSlice';\n\nfunction ContactList () {\n\n  const contacts = useSelector(selectContactsItems);\n  const filterValue = useSelector(selectFilterValue);\n \n  const getFilteredContacts = (contacts, filterValue) => {\n    return contacts.filter(item =>\n      item.name.toLowerCase().includes(filterValue.toLowerCase())\n    );\n  }\n\n  const filteredContacts = getFilteredContacts(contacts, filterValue);\n  \n    return (\n        <>\n            <ul>\n                {filteredContacts.map(item => (\n                    <ContactItem key={item.id} item={item}/>\n                ))}\n            </ul>\n        </>\n  );\n};\n\n\nexport default ContactList;\n","import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikError } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  width: 400px;\n  padding: 8px;\n  border: 1px solid #2a2a2a;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n  color: tomato;\n`;\n\nexport const FrmButton = styled.button`\n  width: 120px;\n  cursor: pointer;\n`;","import * as Yup from 'yup';\nimport Notiflix from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContactsItems } from 'redux/contactsSlice';\nimport { addContact } from 'redux/operations';\nimport { Formik, Field } from 'formik';\nimport { Form, FormField, ErrorMessage, FrmButton } from './ContactForm.styled';\n\n\nconst nameRegex = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\nconst numberRegex = /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\nconst ContactSchema = Yup.object().shape({\n    name: Yup.string()\n        .matches(nameRegex, {message: \"Invalid name\", })\n        .required('Required'),\n    number: Yup.string()\n        .matches(numberRegex, {message: \"Invalid number. For example '123-45-67'\", })\n        .required('Required')\n});\n\n\nconst ContactForm = () => {\n    const dispatch = useDispatch();\n    const contactsItems = useSelector(selectContactsItems);\n\n    \n    return (\n        <Formik\n            initialValues={{\n                name: '',\n                number: '',\n            }}\n            validationSchema={ContactSchema}\n            onSubmit={(data, actions) => {\n                if (contactsItems.find(item => item.name.toLowerCase() === data.name.toLowerCase())) {\n                    return Notiflix.Notify.failure(`Контакт ${data.name} вже існує`);\n                }\n                dispatch(addContact(data));\n                Notiflix.Notify.success(`Контакт ${data.name} доданий до контактів`);\n                \n                actions.resetForm();\n            }}\n        >\n\n            <Form>\n                <FormField>\n                    Name\n                    <Field name=\"name\" />\n                    <ErrorMessage name=\"name\" component=\"span\" />\n                </FormField>\n                <FormField>\n                    Tel\n                    <Field name=\"number\" />\n                    <ErrorMessage name=\"number\" component=\"span\" />\n                </FormField>\n                <FrmButton type=\"submit\">Add Contact</FrmButton>\n            </Form>\n    \n        </Formik>\n    );\n    \n}\n\nexport default ContactForm;","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { selectContactsItems, selectError, selectIsLoading } from 'redux/contactsSlice';\nimport { fetchContacts } from 'redux/operations';\nimport Loader from 'components/Loader/Loader';\n// import { Layout } from 'components/Layout';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\n\n\nexport const Contacts = () => {\n\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContactsItems);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    // <Layout>\n    <>\n      {isLoading && !error && <b><Loader /></b>}\n\n      <ContactForm />\n      \n      <h2>Contacts</h2>\n      {contacts.length !== 0 ? (\n        <>\n          <Filter />\n          <ContactList />\n        </>\n        ) : ( <h3>There are no contacts in your phonebook!</h3> )\n      }\n    </>\n    // </Layout>\n  );\n}\n\nexport default Contacts;"],"names":["StyledLoader","styled","strokeColor","FrmLabel","FrmInput","dispatch","useDispatch","filterValue","useSelector","selectFilterValue","name","type","value","onChange","e","setFilter","currentTarget","Item","FrmButton","item","number","onClick","deleteContact","id","Notiflix","filteredContacts","contacts","filter","toLowerCase","includes","getFilteredContacts","selectContactsItems","map","Form","FormikForm","FormField","ErrorMessage","FormikError","ContactSchema","Yup","shape","matches","message","required","contactsItems","initialValues","validationSchema","onSubmit","data","actions","find","addContact","resetForm","component","Contacts","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","length"],"sourceRoot":""}